#! /usr/bin/python3

import requests
import base64
import sys
import os
import json
import getpass
from datetime import datetime

copy_goal='$url'    # 复制到剪切板的格式, $url为原图片直链
editor='subl'       # 指定的编辑器, 用于编辑配置文件

config='/home/%s/.config/picup/'%getpass.getuser()  # 配置文件路径
data='picup.json'   # 配置文件名
now=datetime.now().strftime("%Y-%m-%d %H:%M:%S")    # 当前时间, 用于设定默认文件名, 也可以设定此变量为随机数

# 成功时进行的操作
def success(url):
    url=copy_goal.replace('$url',url)
    os.system('echo "%s" | xclip -selection clipboard'%url)
    print('上传成功! 已将内容复制到剪切板: %s'%url)
    os.system('notify-send "上传成功!" "已将内容复制到剪切板: %s"'%url)

# 报错通知
def error(do,reason):
    print('%s失败! 原因: %s'%(do,reason))
    os.system('notify-send "%s失败!" "原因: %s"'%(do,reason))
    exit()

# 读取配置文件或以二进制读取图片
def read_from(file,_type='pic'):
    try:
        if _type=='pic':
            with open(file,'rb')as f:
                result=base64.b64encode(f.read()).decode('utf-8')
        elif _type=='data':
            with open(file,'r')as f:
                result=json.loads(f.read())
        else:
            result=None
        return result
    except FileNotFoundError:
        error('操作','文件不存在')

# 写入文件, 往往是配置文件
def write_in(file,thing):
    with open(file,'w')as f:
        f.write(json.dumps(thing,ensure_ascii=False))

# 初始化, 检查路径及配置文件是否存在
def init():
    if not os.path.exists(config+data):
        os.system('mkdir -p %s'%config)
        write_in(config+data,{'default':'github','github':{'name':'github','token':'','user':'','repo':''}})
        #os.system('notify-send "尚未编辑初始配置!" "正在使用预设编辑器 %s 编辑配置..." && %s "%s%s"'%(editor,editor,config,data))
    else:
        pass

# 设定类
class _set:
    # 用来设定默认图床
    def default(new):
        old_data=read_from(config+data,'data')
        old_data['default']=new
        write_in(config+data,old_data)
    # 设定其他图床的变量
    def other(repo,thing,new):
        old_data=read_from(config+data,'data')
        old_data[repo][thing]=new
        write_in(config+data,old_data)

# 上传类
class up:
    # 一个指向该类其他函数的函数
    def default(file,name=now):
        global data
        func=read_from(config+data,'data')['default']
        try:
            getattr(up,func)(file,name=name)
        except AttributeError:
            error('操作','此默认图床不存在')
    # github 图床插件
    def github(file,name=now):
        global data
        data=read_from(config+data,'data')['github']
        pic=read_from(file,'pic')
        headers={"Authorization": "Bearer %s"%data['token'],"Accept": "application/vnd.github+json"}
        url='https://api.github.com/repos/%s/%s/contents/%s'%(data['user'],data['repo'],name+'.'+file.split('.')[-1])
        r=requests.put(url,headers=headers,json={"message":name,"content":pic})
        if r.status_code==201:
            success(json.loads(r.text)['content']['download_url'])
        elif r.status_code==422:
            error('上传','该文件名已存在')
        elif r.status_code==401 or r.status_code==404:
            error('上传','未设定相关变量, 可使用 set 快速设定, 或使用 -e 进入编辑模式')
        else:
            error('上传','%s(错误状态码)'%r.status_code)

# 主函数
def main():
    global data
    argv=sys.argv
    init()
    if len(argv)==1 or '-h' in argv or '--help' in argv:
        print('用法: [-h | --help] [-l | --list] [-e | --edit] [文件 <新文件名>] [-c | --choose 名称] [set 变量 新值]\n\n查看帮助\n\t$cmd -h 或 $cmd --help\n\n列出已有图床\n\t$cmd -l 或 $cmd --list\n\n编辑配置\n\t$cmd -e 或 $cmd --edit\n\n快速上传图片/文件到默认图床\n\t$cmd 文件\t\t将使用当前时间(格式: Y-m-d H:M:S)重命名远端文件.\n\t$cmd 文件 新文件名\t以指定文件名上传.\n\n使用指定的图床进行上传\n\t$cmd 文件 -c github\t使用 Github 图床.\n\n快速设定配置\n\t$cmd set default github\t设置默认图床为 Github.\n\t$cmd set github repo photo\t设置 github 图床的 repo 参数为 photo.\n\t$cmd set github user wzk0\t设置 github 图床的 user 参数为 wzk0.\n\t$cmd set github token TOKEN\t设置 github 图床的 token 参数为 TOKEN.'.replace('$cmd','picup'))
    else:
        if '-e' in argv or '--edit' in argv:
            os.system('%s %s%s'%(editor,config,data))
        elif '-l' in argv or '--list' in argv:
            data=read_from(config+data,'data')
            _list=list(data.keys())
            print('default\n\t%s\n'%data['default'])
            _list.remove('default')
            for l in _list:
                result=[]
                for dl in list(data[l].keys()):
                    result.append('<%s>: \t%s'%(dl,data[l][dl]))
                print('%s\n\t%s\n'%(l,'\n\t'.join(result)))
        elif 'set' in argv:
            try:
                if len(argv)==2:
                    print('用法: [set 变量 新值]\n\n快速设定配置\n\t$cmd set default github\t设置默认图床为 Github.\n\t$cmd set github repo photo\t设置 github 图床的 repo 参数为 photo.\n\t$cmd set github user wzk0\t设置 github 图床的 user 参数为 wzk0.\n\t$cmd set github token TOKEN\t设置 github 图床的 token 参数为 TOKEN.'.replace('$cmd','picup'))
                elif argv[argv.index('set')+1]=='default':
                    _set.default(argv[3])
                else:
                    _set.other(argv[argv.index('set')+1],argv[argv.index('set')+2],argv[argv.index('set')+3])
            except IndexError:
                error('操作','未指定要设定的变量或变量缺失')
        elif '-c' in argv or '--choose' in argv:
            try:
                if '-c' in argv:
                    choose=argv[argv.index('-c')+1]
                    argv.remove('-c')
                    argv.remove(choose)
                elif '--choose' in argv:
                    choose=argv[argv.index('--choose')+1]
                    argv.remove('--choose')
                    argv.remove(choose)
            except IndexError:
                error('操作','未指定图床')
            argv=argv[1:]
            try:
                if len(argv)==2:
                    getattr(up,choose)(argv[0],argv[1])
                elif len(argv)==1:
                    getattr(up,choose)(argv[0])
                else:
                    error('上传','过多或过少的无效参数')
            except AttributeError:
                error('操作','没有找到此图床')
        else:
            if len(argv)==2:
                up.default(argv[1])
            elif len(argv)==3:
                up.default(argv[1],name=argv[2])
            else:
                error('上传','过多的无效参数')

main()